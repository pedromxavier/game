#!/usr/local/bin/python3.8
from engine import *

class Game:

    EXPAND = dict(expand=True, fill='both')

    INTRO_LAPSE = 2.0

    W, H = pyautogui.size()

    BG = r"#000000"

    GAME_LAPSE = 30#ms

    SCORE_FILE = r'score.bin'

    def __init__(game):
        ## Tk screen settings
        game.root = tk.Tk()
        game.root.geometry("{:d}x{:d}+0+0".format(game.W, game.H))
        game.root.attributes("-fullscreen", True)
        game.root.configure(background='black')

        game.menu_images = {
            'title' : tk.PhotoImage(master=game.root, file='data/title.gif'),
            'play' : tk.PhotoImage(master=game.root,file='data/play.gif'),
            'exit' : tk.PhotoImage(master=game.root,file='data/exit.gif'),
            'rank' : tk.PhotoImage(master=game.root,file='data/rank.gif'),
            'back' : tk.PhotoImage(master=game.root,file='data/back_to_menu.gif'),
            'controls' : tk.PhotoImage(master=game.root,file='data/controls.gif'),
            'intro' : tk.PhotoImage(master=game.root,file='data/intro.gif'),
        }

        game.sounds = {
            'main_theme' : Sound('data/main_theme.wav'),
            ## 'blaster' : Sound('data/blaster.wav'),
            ## 'tie_blaster' : Sound('data/tie_blaster.wav'),
            ## 'explosion' : Sound('data/explosion.wav'),
        }

        game.intro = tk.Label(game.root, image=game.menu_images['intro'], bd=0)

        game.menu = tk.Frame(game.root, bg=game.BG)
    
        game.menu_title = tk.Label(game.menu, bg='black',image=game.menu_images['title'],height=210,bd=0)
        game.menu_title.pack(side='top')
    
        game.menu_play = tk.Label(game.menu, bg='black', image=game.menu_images['play'],height=90,bd=0)
        game.menu_play.pack()
        game.menu_play.bind("<Button-1>", game.menu_play_func)
    
        game.menu_rank = tk.Label(game.menu, image=game.menu_images['rank'],height=90,bg='black',bd=0)
        game.menu_rank.pack()
        game.menu_rank.bind("<Button-1>", game.menu_rank_func)
    
        game.menu_exit = tk.Label(game.menu, bg='black', image=game.menu_images['exit'],height=90,bd=0)
        game.menu_exit.pack()
        game.menu_exit.bind("<Button-1>", game.menu_exit_func)
    
        game.menu_controls = tk.Label(game.menu, image=game.menu_images['controls'],bd=0)
        game.menu_controls.pack(side='bottom')

        game.rank = tk.Frame(game.root)

        game.rank_rank = tk.Label(game.rank, bg='black',height=500,width=100)
        game.rank_rank.pack(side='top')

        game.rank_back = tk.Label(game.rank, bg='black',image=game.menu_images['back'],height=150,bd=0)
        game.rank_back.pack(side='top')
        game.rank_back.bind("<Button-1>", game.rank_back_func)
    
        game.game = tk.Frame(game.root)

        game.canvas = tk.Canvas(game.game, width=game.W, height=game.H, bg=game.BG)
        game.canvas.pack(**game.EXPAND)

        game.images = {
            'millenium_falcon' : Image.open('data/millenium_falcon.gif'),
            'fighter' : Image.open('data/fighter.gif'),
            'laser' : Image.open('data/laser.gif'),
        }

        game.gifs = {
            'explosion' : GIF(game, r'data/Explosion%d.gif', 1, 7),
            'win' : GIF(game, r'data/frame_%d_delay-0.1s.gif', 0, 27),
            'lose' : GIF(game, r'data/Scene%d.gif', 1, 18),
        }

        #=================================================#
        #               :: MOVIMENTO ::                   #
        game.root.bind("<KeyPress-Up>"  ,game.p_up)       #
        game.root.bind("<KeyRelease-Up>",game.r_up)       #
                                                          #
        game.root.bind("<KeyPress-Down>"  ,game.p_down)   #
        game.root.bind("<KeyRelease-Down>",game.r_down)   #
                                                          #
        game.btn_up   = False                             #
        game.btn_down = False                             #
                                                          #        
        game.root.bind("<KeyPress-Left>"   ,game.p_left)  #   Esse trecho implementa
        game.root.bind("<KeyRelease-Left>" ,game.r_left)  #   os comandos referentes
                                                          #   as teclas.
        game.root.bind("<KeyPress-Right>"   ,game.p_right)#
        game.root.bind("<KeyRelease-Right>" ,game.r_right)#
                                                          #
        game.btn_left = False                             #
        game.btn_right = False                            #
        #                :: OUTROS ::                     #
        game.root.bind("<KeyPress-space>"  , game.p_shot) #
        game.root.bind("<KeyRelease-space>", game.r_shot) #
                                                          #
        game.btn_shot = False                             #
        game.btn_shot_cooldown = True                     #
        #=================================================#


        #=================================================#
        game.start_time = None
        
        game.objects = []

        #=================================================#

        game.score_frame = tk.Frame(game.game)

        game.score_fighters = tk.Frame(game.score_frame)
        game.score_fighters.pack(side='top')

        game.score_fighters_text = tk.Label(game.score_fighters, text="Fighters:")
        game.score_fighters_text.pack(side='left')

        game.score_fighters_num = tk.Label(game.score_fighters, text="0")
        game.score_fighters_num.pack(side='left')

        game.score_time = tk.Frame(game.score_frame)
        game.score_time.pack(side='top')

        game.score_time_text = tk.Label(game.score_time, text="Fighters:")
        game.score_time_text.pack(side='left')

        game.score_time_num = tk.Label(game.score_time, text="0.0")
        game.score_time_num.pack(side='left')

        game.record = tk.Frame(game.game)
        
        game.record_question = tk.Label(game.record, text = "Enter your name:",fg='white',bg='black')
        game.record_question.pack()

        game.record.bind('<Return>', game.save_score)

        game.player_name = tk.StringVar()

        game.record_answer = tk.Entry(game.record, textvariable=game.player_name)
        game.record_answer.pack()

        game.start()

        game.root.mainloop()

    def menu_play_func(game, event):
        ## Switch from Menu to Canvas
        game.menu.pack_forget()
        game.game.pack(**game.EXPAND)

        ## Start game
        game.play()

    def menu_exit_func(game, event):
        ## Close Sounds
        for sound in game.sounds.values():
            sound.close()

        ## Close Screen
        game.root.destroy()
    
    def menu_rank_func(game, event):
        ## Switch to ranking
        game.menu.pack_forget()
        game.rank.pack(**game.EXPAND)
    
    def rank_back_func(game, event):
        ## Switch back to menu
        game.rank.pack_forget()
        game.menu.pack(**game.EXPAND)

    def start(game):
        ## Show Intro Image
        game.intro.pack(anchor='center')

        ## Start playing main theme
        game.sounds['main_theme'].loop()

        sleep(game.INTRO_LAPSE)

        ## Switch to menu
        game.intro.pack_forget()
        game.menu.pack(**game.EXPAND)

    def play(game):
        ...
        game.start_time = clock()
        ...

    def update(game):
        ...

    def pause(game):
        game.pause_time = clock()

    def resume(game):
        game.start_time = clock() - game.pause_time + game.start_time

    def end(game):
        game.final_score = game.score

        game.record.place(relx=0.5, rely=0.5)
        game.record_answer.focus()
        
    def save_score(game, name, score):
        if not name:
            return

        with open(game.SCORE_FILE, 'rb') as file:
            scores = pickle.load(file)

        date = dt.datetime.now()
        
        for i in range(len(scores)):
            if score >= scores[i][1]:
                scores.insert(i, (name, score, date))
                break
        else:
            scores.append((name, score, date))

        with open(game.SCORE_FILE, 'wb') as file:
            pickle.dump(scores, file)

    def reset(game):
        ...

    ## ===================== ##

    def p_shot(game, event):
        game.btn_shot = True
        
    def r_shot(game, event):
        game.btn_shot = False
        game.btn_shot_cooldown = True
        
    def p_up(game, event):
        game.btn_up = True
    def r_up(game, event):
        game.btn_up = False

    def p_down(game, event):
        game.btn_down = True
    def r_down(game, event):
        game.btn_down = False
    
    def p_left(game, event):
        game.btn_left = True
    def r_left(game, event):
        game.btn_left = False

    def p_right(game, event):
        game.btn_right = True
    def r_right(game, event):
        game.btn_right = False

    ## ===================== ##

    @property
    def time(game):
        return clock() - game.start_time

    @property
    def score(game):
        return game.time * 2
        ...
    
if  __name__ == '__main__':
    Game()