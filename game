#!/usr/local/bin/python3.8
from engine import *

class Game:

    EXPAND = dict(expand=True, fill='both')

    INTRO_LAPSE = 3

    W, H = pyautogui.size()

    W_2 = W // 2
    H_2 = H // 2

    ## Millenium Falcon Movement Limit
    x, y = 0, 0
    X, Y = W, H

    BG = r"#000000"

    GAME_LAPSE = 20#ms

    SCORE_FILE = r'score.bin'

    STARS = 1_000

    NAME_LENGHT = 20

    FONT = ('Courier New', 14, 'bold')

    star_dy = 3

    class NameEntry(ttk.Entry):
        def __init__(self, *args, **kwargs):
            ttk.Entry.__init__(self, *args, **kwargs)

            self.configure(validate="key", validatecommand=(self.register(self.on_validate),"%P"))

        def on_validate(self, new_value):
            val = new_value.strip()
            if not 1 <= len(val) <= Game.NAME_LENGHT:
                self.bell()
                return False
            else:
                return True

    def __init__(game):
        ## Tk screen settings
        game.root = tk.Tk()

        game.default_font = nametofont("TkDefaultFont")
        game.default_font.configure(family="Courier New", size=20)

        game.root.geometry("{:d}x{:d}+0+0".format(game.W, game.H))
        game.root['bg'] = game.BG
        game.root.attributes("-fullscreen", True)
        game.root.configure(background='black')

        game.menu_images = {
            'title' : tk.PhotoImage(master=game.root, file='data/title.gif'),
            'play' : tk.PhotoImage(master=game.root,file='data/play.gif'),
            'exit' : tk.PhotoImage(master=game.root,file='data/exit.gif'),
            'rank' : tk.PhotoImage(master=game.root,file='data/rank.gif'),
            'ranking' : tk.PhotoImage(master=game.root,file='data/ranking.gif'),
            'back' : tk.PhotoImage(master=game.root,file='data/back_to_menu.gif'),
            'controls' : tk.PhotoImage(master=game.root,file='data/controls.gif'),
            'intro' : tk.PhotoImage(master=game.root,file='data/intro.gif'),
        }

        game.sounds = {
            'main_theme' : Sound('data/main_theme.wav'),
            ## 'blaster' : Sound('data/blaster.wav'),
            ## 'tie_blaster' : Sound('data/tie_blaster.wav'),
            ## 'explosion' : Sound('data/explosion.wav'),
        }

        game.intro = tk.Label(game.root, image=game.menu_images['intro'], bd=0)

        game.menu = tk.Frame(game.root, bg=game.BG)
    
        game.menu_title = tk.Label(game.menu, bg='black',image=game.menu_images['title'],bd=0)
        game.menu_title.pack(side='top')

        game.menu_options = tk.Frame(game.menu, bg='black')
        game.menu_options.pack(expand=True)
    
        game.menu_play = tk.Label(game.menu_options, bg='black', image=game.menu_images['play'],bd=0)
        game.menu_play.pack()
        game.menu_play.bind("<Button-1>", game.menu_play_func)
    
        game.menu_rank = tk.Label(game.menu_options, image=game.menu_images['rank'],bg='black',bd=0)
        game.menu_rank.pack()
        game.menu_rank.bind("<Button-1>", game.menu_rank_func)
    
        game.menu_exit = tk.Label(game.menu_options, bg='black', image=game.menu_images['exit'],bd=0)
        game.menu_exit.pack()
        game.menu_exit.bind("<Button-1>", game.menu_exit_func)
    
        game.menu_controls = tk.Label(game.menu, image=game.menu_images['controls'],bd=0)
        game.menu_controls.pack(side='bottom')

        game.rank = tk.Frame(game.root, bg='black')

        game.rank_title = tk.Label(game.rank, image=game.menu_images['ranking'],bd=0)
        game.rank_title.pack(side='top')

        game.rank_rank = tk.Label(game.rank, text="Empty", fg='white', bg='black',width=100)
        game.rank_rank.pack(expand=True, side='top')

        game.rank_back = tk.Label(game.rank, bg='black',image=game.menu_images['back'],bd=0)
        game.rank_back.pack(side='bottom')
        game.rank_back.bind("<Button-1>", game.rank_back_func)
    
        game.game = tk.Frame(game.root)

        game.canvas = tk.Canvas(game.game, width=game.W, height=game.H, bg=game.BG)
        game.canvas.pack(**game.EXPAND)

        game.images = {
            'millenium_falcon' : Image.open('data/millenium_falcon.gif'),
            'fighter' : Image.open('data/fighter.gif'),
            'laser' : Image.open('data/laser.gif'),
        }

        game.gifs = {
            'explosion' : GIF(game, r'data/Explosion%d.gif', 1, 7),
            'win' : GIF(game, r'data/frame_%d_delay-0.1s.gif', 0, 27),
            'lose' : GIF(game, r'data/Scene%d.gif', 1, 18),
        }

        #=================================================#
        #               :: MOVIMENTO ::                   #
        game.root.bind("<KeyPress-Up>"  ,game.p_up)       #
        game.root.bind("<KeyRelease-Up>",game.r_up)       #
                                                          #
        game.root.bind("<KeyPress-Down>"  ,game.p_down)   #
        game.root.bind("<KeyRelease-Down>",game.r_down)   #
                                                          #
        game.btn_up   = False                             #
        game.btn_down = False                             #
                                                          #        
        game.root.bind("<KeyPress-Left>"   ,game.p_left)  #   Esse trecho implementa
        game.root.bind("<KeyRelease-Left>" ,game.r_left)  #   os comandos referentes
                                                          #   as teclas.
        game.root.bind("<KeyPress-Right>"   ,game.p_right)#
        game.root.bind("<KeyRelease-Right>" ,game.r_right)#
                                                          #
        game.btn_left = False                             #
        game.btn_right = False                            #
        #                :: OUTROS ::                     #
        game.root.bind("<KeyPress-space>"  , game.p_shot) #
        game.root.bind("<KeyRelease-space>", game.r_shot) #
                                                          #
        game.btn_shot = False                             #
        game.btn_shot_cooldown = True                     #
        #=================================================#


        #=================================================#
        game.start_time = None
        game.points = None
        game.started = False
        game.paused = False

        game.stars = None
        game.rocks = None
        game.fighters = None

        game.pro_lasers = None
        game.con_lasers = None

        game.lvl = None

        game.tick = 0
        #=================================================#

        game.score_frame = tk.Frame(game.game, width=game.W)

        game.score_points = tk.Frame(game.score_frame)
        game.score_points.pack(side='top')

        game.score_points_text = tk.Label(game.score_points, text="Fighters:", font=game.FONT)
        game.score_points_text.pack(side='left')

        game.score_points_num = tk.Label(game.score_points, text="0", font=game.FONT)
        game.score_points_num.pack(side='left')

        game.score_time = tk.Frame(game.score_frame)
        game.score_time.pack(side='top')

        game.score_time_text = tk.Label(game.score_time, text="Time:", font=game.FONT)
        game.score_time_text.pack(side='left')

        game.score_time_num = tk.Label(game.score_time, text="0.0", font=game.FONT)
        game.score_time_num.pack(side='left')

        game.score_frame.place(relx=1, rely=1, anchor='se')

        game.record = tk.Frame(game.game)
        
        game.record_question = tk.Label(game.record, text = "Enter your name:",fg='white',bg='black')
        game.record_question.pack()

        game.record.bind('<Return>', game.save_score)

        game.player_name = tk.StringVar()

        game.record_answer = Game.NameEntry(game.record, textvariable=game.player_name)
        game.record_answer.pack()

        game.pause_menu = tk.Frame(game.game)

        game.pause_label = tk.Label(game.pause_menu, font=("Times New Roman", 72, "bold"), bg='black', fg='white')
        game.pause_label['text'] = "Paused."
        game.pause_label.pack(expand=True)

        game.root.bind("<Escape>", game.toggle_pause)

        game.load()

        game.root.mainloop()

    class TieFighter(GameObject):

        V = 5

        def __init__(obj, game, x, y):
            obj.game = game
            obj.dx = random.randint(2, 4)
            obj.dy = int((obj.v * obj.v - obj.dx * obj.dx) ** .5)

        @property
        def v(obj):
            return obj.V * obj.game.lvl


        @staticmethod
        def spawn(game):
            x, y = random.randint(0, game.W), 0

            return TieFighter(game)

    class MilleniumFalcon(GameObject):

        dx = 7
        dy = 9

        def dxdy(obj, game, x, y):
            dx, dy = 0, 0
            if game.btn_down:
                dy += obj.dy
            if game.btn_up:
                dy -= obj.dy
            if game.btn_left:
                dx -= obj.dx
            if game.btn_right:
                dx += obj.dx
            dx = min(max(game.x + obj.w_2, x + dx), game.X - obj.w_2) - x
            dy = min(max(game.y + obj.h_2, y + dy), game.Y - obj.h_2) - y
            return dx, dy

        def __init__(obj, game):
            img = game.images['millenium_falcon']
            x, y = game.W_2, int(game.H * 0.8)
            GameObject.__init__(obj, game, img, x, y, obj.dxdy)

        def shot(obj):
            if obj.game.btn_shot_cooldown:
                laser = Laser(obj.game, *obj.xy)
                obj.game.pro_lasers.append(laser)

    def menu_play_func(game, event):
        ## Switch from Menu to Canvas
        game.menu.pack_forget()
        game.game.pack(**game.EXPAND)

        ## Create Game Objects
        game.create()

        ## Start game
        game.start()

    def menu_exit_func(game, event):
        ## Close Sounds
        for sound in game.sounds.values():
            sound.close()

        ## Close Screen
        game.root.destroy()

        ## End Program
        sys.exit(None)
    
    def menu_rank_func(game, event):
        ## Load Scores
        scores = game.load_score()

        if scores:
            game.rank_rank['text'] = Game.format_scores(scores)
        else:
            game.rank_rank['text'] = 'Empty'

        ## Switch to ranking
        game.menu.pack_forget()
        game.rank.pack(**game.EXPAND)
    
    def rank_back_func(game, event):
        ## Switch back to menu
        game.rank.pack_forget()
        game.menu.pack(**game.EXPAND)

    def load(game):
        ## Start playing main theme
        game.sounds['main_theme'].loop()

        thread.start_new(game.__load, ())

    def reload(game):
        game.load()

    def __load(game):
        ## Show Intro Image
        game.intro.pack(anchor='center')

        sleep(game.INTRO_LAPSE)

        ## Switch to menu
        game.intro.pack_forget()
        game.menu.pack(**game.EXPAND)

    def start(game):
        game.points = 0
        game.lvl = 1
        game.started = True
        game.start_time = clock()

        game.loop()

    def loop(game):
        if game.update():
            game.root.after(game.GAME_LAPSE, game.loop)
        else:
            return

    def create(game):
        """ Creates all game objects.
        """
        ## Create Stars
        game.create_stars()

        ## Create Millenium Falcon
        game.millenium_falcon = Game.MilleniumFalcon(game)
    
        ## Create TIE Fighters
        game.fighters = Group()

        ## Create Asteroids
        game.rocks = Group()

        ## Create Lasers
        game.pro_lasers = Group()
        game.con_lasers = Group()

    def create_stars(game):
        game.stars = [game.create_star() for _ in range(game.STARS)]

    def create_star(game):
        x, y = random.randint(0, game.W), random.randint(0, game.H)

        r = random.randint(1,2)

        z = random.random()

        if z < 0.9:
            color = "#ffffff"
        elif z < 0.95:
            color = "#77ffff"
        elif z < 0.98:
            color = "#ff2222"
        else:
            color = "#2222ff"

        return game.canvas.create_oval(x-r, y-r, x+r, y+r, fill=color, outline=color)
        

    def update(game):
        if game.paused:
            return True
        else:
            game.update_star()
            game.update_move()
            game.update_text()

            game.update_add()

            game.tick = (game.tick + 1) % 1024
            return True

    def update_add(game):
        if random.random() > (1 / game.lvl):
            ...

    def oval_coords(game, key):
        x1, y1, x2, y2 = game.canvas.coords(key)
        return (x1 + x2) // 2, (y1 + y2) // 2

    def update_star(game):
        for star in game.stars:
            x, y = game.oval_coords(star)
            if y + game.star_dy > game.H:
                dy = - game.H + random.randint(-1, 1)
            else:
                dy = game.star_dy
            game.canvas.move(star, 0, dy)

    def update_move(game):
        for obj in game.objects:
            obj.move()
    
    def update_text(game):
        game.score_points_num['text'] = game.points
        game.score_time_num['text'] = "{:.1f}".format(game.time)

    def toggle_pause(game, event):
        if not game.started:
            return
        else:
            game.paused = not game.paused

        if game.paused:
            game.pause_menu.place(relx=0.5, rely=0.5, anchor='c')
            game.pause_time = clock()
        else:
            game.pause_menu.place_forget()
            game.start_time += (clock() - game.pause_time)

    def end(game):
        game.final_score = game.score

        game.record.place(relx=0.5, rely=0.5)
        game.record_answer.focus()

    @staticmethod
    def format_scores(scores):
        lines = ["{:>20s} {:>6s}    {:>10s} {:>8s}        ".format("Name", "Score", "Day", "Time"),'']
        for name, score, date in scores:
            lines.append("{:>20s} {:6d}    {:%m/%d/%Y %H:%M:%S}        ".format(name, score, date))
        return "\n".join(lines)

    def load_score(game):
        """
        """
        try:
            with open(game.SCORE_FILE, 'rb') as file:
                return pickle.load(file)
        except FileNotFoundError:
            return []
        
    def save_score(game, name, score):
        """
        """
        if not name:
            return

        scores = game.load_score()

        date = dt.datetime.now()
        
        for i in range(len(scores)):
            if score >= scores[i][1]:
                scores.insert(i, (name, score, date))
                break
        else:
            scores.append((name, score, date))

        with open(game.SCORE_FILE, 'wb') as file:
            pickle.dump(scores, file)
    ## ===================== ##

    def p_shot(game, event):
        game.btn_shot = True
        
    def r_shot(game, event):
        game.btn_shot = False
        game.btn_shot_cooldown = True
        
    def p_up(game, event):
        game.btn_up = True
    def r_up(game, event):
        game.btn_up = False

    def p_down(game, event):
        game.btn_down = True
    def r_down(game, event):
        game.btn_down = False
    
    def p_left(game, event):
        game.btn_left = True
    def r_left(game, event):
        game.btn_left = False

    def p_right(game, event):
        game.btn_right = True
    def r_right(game, event):
        game.btn_right = False

    ## ===================== ##

    @property
    def time(game):
        return clock() - game.start_time

    @property
    def score(game):
        return int(round(game.time * game.points))

    @property
    def score_list(game):
        ...

    @property
    def objects(game):
        yield game.millenium_falcon
        for group in (game.pro_lasers, game.con_lasers, game.fighters, game.rocks):
            for item in group:
                yield item

if  __name__ == '__main__':
    Game()